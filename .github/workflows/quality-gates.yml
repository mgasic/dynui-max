name: Quality Gates

# Enforce Gates A-D as P0 prerequisites for Phase 5
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test
  PNPM_CACHE_FOLDER: .pnpm
  # Frozen lockfile in CI
  HUSKY: 0

jobs:
  # Gate A: Static Analysis (typecheck, lint, format)
  gate-a-static:
    name: 'Gate A: Static Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript check
        run: pnpm typecheck

      - name: ESLint check
        run: pnpm lint

      - name: Prettier check
        run: pnpm format:check

  # Gate B: Test Coverage ‚â•80%
  gate-b-testing:
    name: 'Gate B: Test Coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Coverage threshold check
        run: |
          echo "Verifying coverage thresholds ‚â•80%"
          # This will be implemented when vitest.config.ts is added
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  # Gate C: Accessibility (axe + Storybook)
  gate-c-a11y:
    name: 'Gate C: Accessibility'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm build:storybook

      - name: Run a11y tests (unit)
        run: pnpm test:a11y

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run Storybook test-runner (a11y)
        run: |
          echo "Running Storybook a11y tests"
          # This will run @storybook/test-runner with axe
          # Implementation pending Storybook setup
          
      - name: Upload a11y test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: a11y-results
          path: test-results/
          retention-days: 30

  # Gate D: Bundle Analysis & Tree-shaking
  gate-d-bundle:
    name: 'Gate D: Bundle Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Bundle size check (<150KB)
        run: |
          echo "Checking core package bundle size"
          if [ -f "packages/core/dist/index.js" ]; then
            SIZE=$(stat -f%z packages/core/dist/index.js 2>/dev/null || stat -c%s packages/core/dist/index.js)
            MAX_SIZE=153600  # 150KB in bytes
            echo "Bundle size: $SIZE bytes"
            if [ $SIZE -gt $MAX_SIZE ]; then
              echo "‚ùå Bundle size $SIZE exceeds limit of $MAX_SIZE bytes"
              exit 1
            else
              echo "‚úÖ Bundle size within limits"
            fi
          else
            echo "‚ö†Ô∏è Core package not found, skipping bundle check"
          fi

      - name: Tree-shaking verification
        run: |
          echo "Verifying tree-shaking compatibility"
          # Basic check for ESM exports and sideEffects
          if [ -f "packages/core/package.json" ]; then
            node -e "
              const pkg = require('./packages/core/package.json');
              const hasExports = pkg.exports && typeof pkg.exports === 'object';
              const hasSideEffects = Array.isArray(pkg.sideEffects) || pkg.sideEffects === false;
              console.log('üì¶ Exports field:', hasExports ? '‚úÖ' : '‚ùå');
              console.log('üå≥ SideEffects field:', hasSideEffects ? '‚úÖ' : '‚ùå');
              if (!hasExports || !hasSideEffects) {
                console.error('Tree-shaking requirements not met');
                process.exit(1);
              }
            "
          else
            echo "‚ö†Ô∏è Core package.json not found, skipping tree-shake check"
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            packages/*/dist/
            packages/*/build/
          retention-days: 30

  # Quality Gates Summary
  quality-gates-summary:
    name: 'Quality Gates Summary'
    runs-on: ubuntu-latest
    needs: [gate-a-static, gate-b-testing, gate-c-a11y, gate-d-bundle]
    if: always()
    steps:
      - name: Check all gates passed
        run: |
          echo "üìä Quality Gates Results:"
          echo "Gate A (Static): ${{ needs.gate-a-static.result }}"
          echo "Gate B (Testing): ${{ needs.gate-b-testing.result }}"
          echo "Gate C (A11y): ${{ needs.gate-c-a11y.result }}"
          echo "Gate D (Bundle): ${{ needs.gate-d-bundle.result }}"
          
          if [ "${{ needs.gate-a-static.result }}" != "success" ] || 
             [ "${{ needs.gate-b-testing.result }}" != "success" ] || 
             [ "${{ needs.gate-c-a11y.result }}" != "success" ] || 
             [ "${{ needs.gate-d-bundle.result }}" != "success" ]; then
            echo "‚ùå One or more quality gates failed"
            echo "üö´ Phase 5 prerequisites not met"
            exit 1
          else
            echo "‚úÖ All quality gates passed"
            echo "üéØ Phase 5 prerequisites satisfied"
          fi